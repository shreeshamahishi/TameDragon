/* The following code was generated by JFlex 1.4.3 on 5/12/12 7:54 PM */

/**
* This class is the abstraction for a scanner for the tiger language.
*/
package org.tamedragon.compilers.clang.lexer;

import java_cup.runtime.*;
import org.tamedragon.compilers.clang.abssyntree.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/12/12 7:54 PM from the specification file
 * <tt>resources/Clang/clang.lex</tt>
 */
public class ClangLRLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\71\1\32"+
    "\2\27\1\76\1\74\1\25\1\64\1\65\1\73\1\20\1\62\1\21"+
    "\1\15\1\75\1\4\7\6\2\5\1\61\1\63\1\77\1\100\1\70"+
    "\1\35\1\27\4\10\1\17\1\23\5\26\1\12\10\26\1\11\2\26"+
    "\1\7\2\26\1\66\1\30\1\67\1\101\1\24\1\27\1\36\1\33"+
    "\1\43\1\50\1\16\1\22\1\52\1\45\1\47\1\26\1\42\1\14"+
    "\1\51\1\46\1\40\1\56\1\26\1\41\1\44\1\37\1\13\1\34"+
    "\1\54\1\31\1\55\1\53\1\57\1\102\1\60\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\3\4\1\5\1\4\1\6"+
    "\1\7\1\4\1\1\1\10\2\4\1\11\11\4\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\2\41\1\0"+
    "\1\3\1\0\2\3\1\0\2\4\1\42\3\4\1\43"+
    "\1\44\1\45\1\46\1\47\2\4\2\0\15\4\1\50"+
    "\2\4\1\51\2\4\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\2\3"+
    "\3\4\1\42\1\0\1\42\4\4\1\76\1\77\1\0"+
    "\2\77\4\4\1\100\14\4\1\101\4\4\1\102\1\103"+
    "\2\4\1\104\2\42\1\0\1\105\1\4\1\106\1\4"+
    "\1\0\2\4\1\107\1\110\3\4\1\111\2\4\1\112"+
    "\10\4\1\113\2\4\1\114\1\4\1\115\1\116\5\4"+
    "\1\117\2\4\1\120\5\4\1\121\1\4\1\122\2\4"+
    "\1\123\2\4\1\124\1\125\1\126\1\127\1\130\1\4"+
    "\1\131\2\4\1\132\2\4\1\133\1\134\1\135\1\136"+
    "\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\311\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\311\0\u0430\0\u0473\0\311\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\311\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\u0711"+
    "\0\u0754\0\311\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u09f2\0\311\0\u0a35\0\311\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u029e\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\311\0\311\0\311\0\311\0\311"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u01d5\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\u135e\0\311\0\311\0\311\0\311\0\311\0\311\0\311"+
    "\0\311\0\311\0\311\0\u13a1\0\311\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u01d5"+
    "\0\311\0\u1682\0\u16c5\0\u0ddf\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u01d5\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u01d5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\311\0\311\0\u1c44\0\u1c87\0\u01d5\0\311"+
    "\0\u1cca\0\u1d0d\0\u01d5\0\u1d50\0\u01d5\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u01d5\0\u01d5\0\u1e9f\0\u1ee2\0\u1f25\0\u01d5\0\u1f68"+
    "\0\u1fab\0\u01d5\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u21c3\0\u01d5\0\u2206\0\u2249\0\u01d5\0\u228c\0\u01d5"+
    "\0\u01d5\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u01d5\0\u241e"+
    "\0\u2461\0\u01d5\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u01d5"+
    "\0\u25f3\0\u01d5\0\u2636\0\u2679\0\u01d5\0\u26bc\0\u26ff\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u2742\0\u01d5\0\u2785\0\u27c8"+
    "\0\u01d5\0\u280b\0\u284e\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\2\10\4\11\1\12\1\13"+
    "\1\14\1\15\1\11\1\16\1\17\1\20\2\11\1\21"+
    "\1\11\2\4\1\11\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\11\1\30\1\11\1\31\1\32\2\11\1\33"+
    "\1\34\1\11\1\35\1\11\1\36\2\11\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\2\4\25\63\1\64\1\63\1\65"+
    "\50\63\73\6\1\66\1\6\1\67\5\6\105\0\1\6"+
    "\104\0\2\70\1\71\1\72\1\0\1\73\1\74\1\73"+
    "\1\74\1\75\13\0\1\72\55\0\3\10\2\0\1\73"+
    "\1\74\1\73\1\74\1\75\71\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\21\11\30\0\11\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\10\11"+
    "\1\76\10\11\30\0\11\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\77\16\11\30\0\3\100\100\0\10\11\1\101\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\2\0\1\102\1\0"+
    "\2\11\1\0\10\11\1\103\10\11\44\0\1\104\57\0"+
    "\1\105\23\0\1\106\46\0\1\107\7\0\1\110\6\0"+
    "\10\11\1\111\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\2\11\1\112\16\11"+
    "\30\0\24\113\1\114\1\113\1\0\50\113\4\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\3\11\1\115\15\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\116\16\11\30\0\7\11"+
    "\1\117\1\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\6\11\1\120\12\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\17\11\1\121\1\11"+
    "\30\0\11\11\1\0\1\122\1\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\123\1\11\1\124\4\11"+
    "\1\125\11\11\30\0\11\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\1\11"+
    "\1\126\5\11\1\127\1\11\1\130\4\11\1\131\2\11"+
    "\30\0\11\11\1\0\2\11\2\0\1\132\2\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\10\11\1\133"+
    "\10\11\30\0\11\11\1\0\1\134\1\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\135\16\11\30\0\11\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\136\16\11\30\0\11\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\7\11"+
    "\1\137\11\11\114\0\1\140\7\0\1\141\102\0\1\142"+
    "\102\0\1\143\76\0\1\144\3\0\1\145\75\0\1\146"+
    "\4\0\1\147\102\0\1\150\101\0\1\151\1\152\102\0"+
    "\1\153\102\0\1\154\102\0\1\155\1\0\1\156\1\63"+
    "\2\0\25\63\1\0\1\63\1\0\50\63\32\0\1\157"+
    "\4\0\1\160\1\0\1\161\4\0\1\162\131\0\1\163"+
    "\11\0\3\70\6\0\1\75\71\0\2\70\1\71\2\0"+
    "\1\73\1\74\1\73\1\74\1\75\71\0\3\164\1\0"+
    "\1\164\5\0\2\164\2\0\2\164\7\0\1\164\2\0"+
    "\1\164\4\0\1\164\4\0\1\164\44\0\1\165\1\0"+
    "\1\165\77\0\1\165\1\0\1\165\73\0\11\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\6\11\1\166\2\11\1\167\7\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\10\11\1\170\10\11\30\0"+
    "\3\100\3\0\1\171\1\0\1\171\1\0\2\172\2\0"+
    "\2\173\63\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\6\11\1\174"+
    "\12\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\1\11\1\175"+
    "\17\11\30\0\7\11\1\176\1\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\21\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\2\11\1\177"+
    "\16\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\3\11\1\200"+
    "\15\11\51\0\1\201\61\0\1\202\1\0\1\202\1\203"+
    "\12\0\1\113\2\0\1\204\2\0\1\113\1\203\6\113"+
    "\1\0\1\113\4\0\1\113\33\0\1\113\4\0\11\11"+
    "\1\0\1\205\1\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\21\11\30\0\10\11\1\206"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\11\11\1\207\7\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\210\17\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\13\11\1\211\5\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\20\11\1\212\30\0\11\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\1\11\1\213\12\11\1\214\4\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\6\11\1\215\12\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\10\11\1\216\10\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\217\20\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\220\2\11\1\221\15\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\222\16\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\14\11\1\223\1\224\3\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\11\11\1\225\7\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\1\11\1\226\17\11"+
    "\30\0\11\11\1\0\2\11\2\0\1\227\2\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\7\11\1\230\1\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\11\1\231\17\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\11\11\1\232\7\11\124\0"+
    "\1\233\102\0\1\234\6\0\3\164\1\0\1\164\1\73"+
    "\1\74\1\73\1\74\1\0\2\164\2\0\2\164\7\0"+
    "\1\164\2\0\1\164\4\0\1\164\4\0\1\164\36\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\11\11\1\235\7\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\2\11\1\236\16\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\14\11\1\237\4\11\46\0"+
    "\2\240\63\0\3\241\11\0\2\242\73\0\1\240\1\0"+
    "\1\240\72\0\11\11\1\0\1\243\1\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\21\11"+
    "\30\0\11\11\1\0\1\244\1\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\13\11\1\245\5\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\246\20\11\30\0\1\247"+
    "\1\0\1\247\16\0\1\201\61\0\11\203\1\0\2\203"+
    "\2\0\2\203\2\0\1\203\2\0\1\203\1\0\2\203"+
    "\1\0\21\203\30\0\11\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\1\250"+
    "\20\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\1\251\20\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\12\11\1\252\6\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\2\11\1\253\16\11"+
    "\30\0\11\11\1\0\1\254\1\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\7\11\1\255\1\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\11\11\1\256\7\11\30\0"+
    "\11\11\1\0\1\257\1\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\21\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\260\4\11\1\261\12\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\3\11\1\262\15\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\1\11\1\263\17\11"+
    "\30\0\7\11\1\264\1\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\21\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\3\11\1\265\15\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\10\11\1\266\10\11"+
    "\30\0\11\11\1\0\1\267\1\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\11\1\270\17\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\271\20\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\272\1\11\1\0\21\11\30\0\11\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\273\16\11\30\0\10\11\1\274"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\21\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\14\11\1\275\4\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\10\11\1\276\10\11\30\0\3\241\3\0\1\171"+
    "\1\0\1\171\5\0\2\173\63\0\3\241\100\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\3\11\1\277\15\11\30\0\11\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\11\1\300\17\11\30\0\1\113"+
    "\1\0\1\113\16\0\1\201\61\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\4\11\1\301\14\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\302\17\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\12\11\1\303\6\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\3\11\1\304\15\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\6\11\1\305\12\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\11\11\1\306\7\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\307\17\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\11\11\1\310\7\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\5\11\1\311\13\11\30\0\11\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\312\17\11\30\0\11\11\1\0\1\313"+
    "\1\11\2\0\3\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\21\11\30\0\11\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\314\16\11\30\0\11\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\5\11\1\315\13\11\30\0\7\11\1\316\1\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\21\11\30\0\10\11\1\317\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\21\11\30\0\11\11\1\0\1\320\1\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\21\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\10\11\1\321"+
    "\10\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\10\11\1\322"+
    "\10\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\11\11\1\323"+
    "\7\11\30\0\11\11\1\0\1\324\1\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\21\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\10\11\1\325\10\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\1\11\1\326\17\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\10\11\1\327\10\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\5\11\1\330\13\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\1\11\1\331\17\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\12\11\1\332\6\11"+
    "\30\0\11\11\1\0\2\11\2\0\1\333\2\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\30\0"+
    "\11\11\1\0\2\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\7\11\1\334\11\11\30\0"+
    "\10\11\1\335\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\21\11\30\0\11\11"+
    "\1\0\1\336\1\11\2\0\3\11\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\1\0\21\11\30\0\11\11\1\0"+
    "\1\337\1\11\2\0\3\11\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\1\0\21\11\30\0\10\11\1\340\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\1\0\21\11\30\0\11\11\1\0\2\11\2\0"+
    "\1\341\2\11\1\0\1\11\2\0\1\11\1\0\2\11"+
    "\1\0\21\11\30\0\11\11\1\0\1\342\1\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\21\11\30\0\7\11\1\343\1\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\2\11\1\0"+
    "\21\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\1\11\1\344"+
    "\17\11\30\0\11\11\1\0\2\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\12\11\1\345"+
    "\6\11\30\0\11\11\1\0\1\346\1\11\2\0\3\11"+
    "\1\0\1\11\2\0\1\11\1\0\2\11\1\0\21\11"+
    "\30\0\11\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\3\11\1\347\15\11"+
    "\30\0\11\11\1\0\1\350\1\11\2\0\3\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\21\11\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10385];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\13\1\1\11\2\1\1\11"+
    "\11\1\11\11\2\1\1\11\12\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\0\6\1\5\11\2\1"+
    "\2\0\24\1\10\11\1\1\12\11\1\1\1\11\4\1"+
    "\1\0\6\1\1\11\1\0\30\1\2\11\3\1\1\11"+
    "\1\1\1\0\4\1\1\0\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	private Symbol symbol(int type)
	{
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	private Double getDouble(String str)
	{
		return new Double(str);  // to be modified
	}
	
	private Integer getInt(String str)
	{
		return new Integer(str); // to be modified
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ClangLRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ClangLRLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Illegal character <"+ yytext()+">");
          }
        case 96: break;
        case 27: 
          { return symbol(sym.ASSIGN);
          }
        case 97: break;
        case 71: 
          { return symbol(sym.VOID);
          }
        case 98: break;
        case 67: 
          { return symbol(sym.LEFT_SHIFT_ASSIGN);
          }
        case 99: break;
        case 88: 
          { return symbol(sym.SWITCH);
          }
        case 100: break;
        case 31: 
          { string.append("\\");
          }
        case 101: break;
        case 56: 
          { return symbol(sym.OR);
          }
        case 102: break;
        case 15: 
          { return symbol(sym.LPAREN);
          }
        case 103: break;
        case 64: 
          { return symbol(sym.ASM);
          }
        case 104: break;
        case 44: 
          { return symbol(sym.NOT_EQUALS);
          }
        case 105: break;
        case 36: 
          { return symbol(sym.ADD_ASSIGN);
          }
        case 106: break;
        case 66: 
          { return symbol(sym.RIGHT_SHIFT_ASSIGN);
          }
        case 107: break;
        case 82: 
          { return symbol(sym.EXTERN);
          }
        case 108: break;
        case 51: 
          { return symbol(sym.LEFT_SHIFT);
          }
        case 109: break;
        case 77: 
          { return symbol(sym.FLOAT);
          }
        case 110: break;
        case 7: 
          { return symbol(sym.MINUS);
          }
        case 111: break;
        case 89: 
          { return symbol(sym.DOUBLE);
          }
        case 112: break;
        case 14: 
          { return symbol(sym.SEMICOLON);
          }
        case 113: break;
        case 69: 
          { return symbol(sym.ELSE);
          }
        case 114: break;
        case 28: 
          { return symbol(sym.BITWISE_XOR);
          }
        case 115: break;
        case 37: 
          { return symbol(sym.DECREMENT);
          }
        case 116: break;
        case 5: 
          { return symbol(sym.DOT);
          }
        case 117: break;
        case 12: 
          { return symbol(sym.COLON);
          }
        case 118: break;
        case 65: 
          { return symbol(sym.INT);
          }
        case 119: break;
        case 43: 
          { return symbol(sym.GTE);
          }
        case 120: break;
        case 46: 
          { return symbol(sym.AND);
          }
        case 121: break;
        case 39: 
          { return symbol(sym.MINUS_ASSIGN);
          }
        case 122: break;
        case 50: 
          { return symbol(sym.MODULO_ASSIGN);
          }
        case 123: break;
        case 8: 
          { string.setLength(0); yybegin(STRING);
          }
        case 124: break;
        case 52: 
          { return symbol(sym.LTE);
          }
        case 125: break;
        case 40: 
          { return symbol(sym.IF);
          }
        case 126: break;
        case 18: 
          { return symbol(sym.RBRACK);
          }
        case 127: break;
        case 20: 
          { return symbol(sym.NOT);
          }
        case 128: break;
        case 9: 
          { return symbol(sym.QUESTION);
          }
        case 129: break;
        case 81: 
          { return symbol(sym.WHILE);
          }
        case 130: break;
        case 76: 
          { return symbol(sym.UNION);
          }
        case 131: break;
        case 63: 
          { return symbol(sym.CHAR_LITERAL, yytext());
          }
        case 132: break;
        case 47: 
          { return symbol(sym.BITWISE_AND_ASSIGN);
          }
        case 133: break;
        case 13: 
          { return symbol(sym.COMMA);
          }
        case 134: break;
        case 48: 
          { yybegin(COMMENT);
          }
        case 135: break;
        case 21: 
          { return symbol(sym.ONES_COMPLEMENT);
          }
        case 136: break;
        case 87: 
          { return symbol(sym.SIZEOF);
          }
        case 137: break;
        case 94: 
          { return symbol(sym.REGISTER);
          }
        case 138: break;
        case 30: 
          { string.append(yytext());
          }
        case 139: break;
        case 11: 
          { return symbol(sym.RBRACE);
          }
        case 140: break;
        case 68: 
          { return symbol(sym.LONG);
          }
        case 141: break;
        case 6: 
          { return symbol(sym.PLUS);
          }
        case 142: break;
        case 17: 
          { return symbol(sym.LBRACK);
          }
        case 143: break;
        case 85: 
          { return symbol(sym.STRUCT);
          }
        case 144: break;
        case 60: 
          { string.append("\n");
          }
        case 145: break;
        case 72: 
          { return symbol(sym.AUTO);
          }
        case 146: break;
        case 57: 
          { string.append("\"");
          }
        case 147: break;
        case 80: 
          { return symbol(sym.SHORT);
          }
        case 148: break;
        case 38: 
          { return symbol(sym.POINTER_MEM_ACCESS);
          }
        case 149: break;
        case 29: 
          { return symbol(sym.BITWISE_OR);
          }
        case 150: break;
        case 86: 
          { return symbol(sym.SIGNED);
          }
        case 151: break;
        case 70: 
          { return symbol(sym.ENUM);
          }
        case 152: break;
        case 3: 
          { return symbol(sym.INTEGER_LITERAL, getInt(yytext())) ;
          }
        case 153: break;
        case 75: 
          { return symbol(sym.GOTO);
          }
        case 154: break;
        case 83: 
          { return symbol(sym.RETURN);
          }
        case 155: break;
        case 59: 
          { string.append("\r");
          }
        case 156: break;
        case 92: 
          { return symbol(sym.UNSIGNED);
          }
        case 157: break;
        case 61: 
          { yybegin(YYINITIAL);
          }
        case 158: break;
        case 58: 
          { string.append("\t");
          }
        case 159: break;
        case 10: 
          { return symbol(sym.LBRACE);
          }
        case 160: break;
        case 74: 
          { return symbol(sym.CHAR);
          }
        case 161: break;
        case 54: 
          { return symbol(sym.BITWISE_XOR_ASSIGN);
          }
        case 162: break;
        case 84: 
          { return symbol(sym.STATIC);
          }
        case 163: break;
        case 34: 
          { return symbol(sym.FLOATING_POINT_LITERAL, getDouble(yytext()));
          }
        case 164: break;
        case 91: 
          { return symbol(sym.DEFAULT);
          }
        case 165: break;
        case 79: 
          { return symbol(sym.CONST);
          }
        case 166: break;
        case 45: 
          { return symbol(sym.MULTIPLY_ASSIGN);
          }
        case 167: break;
        case 24: 
          { return symbol(sym.DIVIDE);
          }
        case 168: break;
        case 19: 
          { return symbol(sym.GT);
          }
        case 169: break;
        case 49: 
          { return symbol(sym.DIVIDE_ASSIGN);
          }
        case 170: break;
        case 25: 
          { return symbol(sym.MODULO);
          }
        case 171: break;
        case 2: 
          { /* ignore */
          }
        case 172: break;
        case 55: 
          { return symbol(sym.BITWISE_OR_ASSIGN);
          }
        case 173: break;
        case 93: 
          { return symbol(sym.VOLATILE);
          }
        case 174: break;
        case 32: 
          { yybegin(YYINITIAL);
			return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 175: break;
        case 16: 
          { return symbol(sym.RPAREN);
          }
        case 176: break;
        case 90: 
          { return symbol(sym.TYPEDEF);
          }
        case 177: break;
        case 78: 
          { return symbol(sym.BREAK);
          }
        case 178: break;
        case 33: 
          { throw new Error("Illegal character in comment state <"+ yytext()+">");
          }
        case 179: break;
        case 41: 
          { return symbol(sym.DO);
          }
        case 180: break;
        case 62: 
          { return symbol(sym.FOR);
          }
        case 181: break;
        case 73: 
          { return symbol(sym.CASE);
          }
        case 182: break;
        case 35: 
          { return symbol(sym.INCREMENT);
          }
        case 183: break;
        case 95: 
          { return symbol(sym.CONTINUE);
          }
        case 184: break;
        case 26: 
          { return symbol(sym.LT);
          }
        case 185: break;
        case 23: 
          { return symbol(sym.BITWISE_AND);
          }
        case 186: break;
        case 42: 
          { return symbol(sym.RIGHT_SHIFT);
          }
        case 187: break;
        case 4: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 188: break;
        case 22: 
          { return symbol(sym.STAR);
          }
        case 189: break;
        case 53: 
          { return symbol(sym.EQUALS);
          }
        case 190: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
