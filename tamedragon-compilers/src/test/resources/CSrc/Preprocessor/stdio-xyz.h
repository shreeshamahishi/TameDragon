/*  stdio.h

    Definitions for stream input/output.
*/

/*
 *      C Run Time Library - Version 1.0
 *
 *      Copyright (c) 2011 by SkyGraph Technologies
 *      All Rights Reserved.
 *
 */

#ifndef __STDIO_H
#define __STDIO_H

typedef long    fpos_t;  /* Definition of the file position type */

/* An external reference to _floatconvert (using #pragma extref _floatconvert)
 * forces floating point format conversions to be linked.
 */
extern int _floatconvert;

/* Bufferisation type to be used as 3rd argument for "setvbuf" function
*/
#define _IOFBF  0
#define _IOLBF  1
#define _IONBF  2

/*  "flags" bits definitions
*/
#define _F_RDWR 0x0003                  /* Read/write flag       */
#define _F_READ 0x0001                  /* Read only file        */
#define _F_WRIT 0x0002                  /* Write only file       */
#define _F_BUF  0x0004                  /* Malloc'ed Buffer data */
#define _F_LBUF 0x0008                  /* line-buffered file    */
#define _F_ERR  0x0010                  /* Error indicator       */
#define _F_EOF  0x0020                  /* EOF indicator         */
#define _F_BIN  0x0040                  /* Binary file indicator */
#define _F_IN   0x0080                  /* Data is incoming      */
#define _F_OUT  0x0100                  /* Data is outgoing      */
#define _F_TERM 0x0200                  /* File is a terminal    */

/* End-of-file constant definition
*/
#define EOF (-1)                /* End of file indicator */
#define WEOF (_WINT_T)(0xFFFF)   /* wide-character end of file indicator */

/* Default buffer size use by "setbuf" function
*/
#define BUFSIZ  512         /* Buffer size for stdio */

/* Size of an arry large enough to hold a temporary file name string
*/
#define L_ctermid   5       /* CON: plus null byte */
#define P_tmpdir    ""      /* temporary directory */
#define L_tmpnam    13      /* tmpnam buffer size */

/* Constants to be used as 3rd argument for "fseek" function
*/
#define SEEK_CUR    1
#define SEEK_END    2
#define SEEK_SET    0

/* Number of unique file names that shall be generated by "tmpnam" function
*/
#define TMP_MAX     0xFFFF

/* Imported from stddef, change later */
// typedef unsigned short wchar_t;
//typedef wchar_t wint_t;
typedef unsigned int size_t;

# define _WINT_T wint_t
# define NULL (void *)0
# define _SIZE_T size_t

/* Definition of the control structure for streams
*/
typedef struct
{
        unsigned char  *curp;       /* Current active pointer     */
        unsigned char  *buffer;     /* Data transfer buffer       */
        int             level;      /* fill/empty level of buffer */
        int             bsize;      /* Buffer size                */
        unsigned short  istemp;     /* Temporary file indicator   */
        unsigned short  flags;      /* File status flags          */
//        wchar_t         hold;       /* Ungetc char if no buffer   */
        char            fd;         /* File descriptor            */
        unsigned char   token;      /* Used for validity checking */
}       FILE;                       /* This is the FILE object    */

/* Number of files that can be open simultaneously
*/

#define FOPEN_MAX (_NFILE_)

#define FILENAME_MAX 260

void       clearerr(FILE * __stream);
int        fclose(FILE * __stream);
int        fflush(FILE * __stream);
int        fgetc(FILE * __stream);
//_WINT_T    fgetwc(FILE * __stream);
int        fgetpos(FILE * __stream, fpos_t*__pos);
char  *    fgets(char * __s, int __n, FILE * __stream);
//wchar_t*   fgetws(wchar_t * __s, int __n, FILE * __stream);
FILE  *    fopen(const char * __path, const char * __mode);
//FILE  *    _wfopen(const wchar_t * __path,
//                                 const wchar_t * __mode);
int        fprintf(FILE * __stream, const char * __format, ...);
//int        fwprintf(FILE * __stream, const wchar_t *__format, ...);
int        fputc(int __c, FILE * __stream);
//_WINT_T    fputwc(_WINT_T __c, FILE * __stream);
int        fputs(const char * __s, FILE * __stream);
//int        fputws(const wchar_t * __s, FILE * __stream);
_SIZE_T    fread(void * __ptr, _SIZE_T __size, _SIZE_T __n,
                                 FILE * __stream);
FILE  *    freopen(const char * __path, const char * __mode,
                                 FILE * __stream);
//FILE  *    _wfreopen(const wchar_t * __path, const wchar_t * __mode,
//                                 FILE * __stream);
int        fscanf(FILE * __stream, const char * __format, ...);
//int        fwscanf(FILE *__stream, const wchar_t *__format, ...);
int        fseek(FILE * __stream, long __offset, int __whence);
int        fsetpos(FILE * __stream, const fpos_t*__pos);
long       ftell(FILE * __stream);
_SIZE_T    fwrite(const void * __ptr, _SIZE_T __size, _SIZE_T __n,
                                 FILE * __stream);
char  *    gets(char * __s);
//wchar_t*   _getws(wchar_t * __s);
int        _pclose(FILE *__stream);
void       perror(const char * __s);
//void       _wperror(const wchar_t * __s);
FILE *     _popen(const char * __command, const char * __mode);
//FILE *     _wpopen(const wchar_t * __command,
//                                 const wchar_t * __mode);

int        printf(const char * __format, ...);
//int        wprintf(const wchar_t * __format, ...);
int        puts(const char * __s);
//int        _putws(const wchar_t * __s);

int        remove(const char * __path);
//int        _wremove(const wchar_t * __path);
int        rename(const char * __oldname,const char * __newname);
//int        _wrename(const wchar_t * __oldname,const wchar_t * __newname);
void       rewind(FILE * __stream);
int        scanf(const char * __format, ...);
//int        wscanf(const wchar_t * __format, ...);
void       setbuf(FILE * __stream, char * __buf);
int        setvbuf(FILE * __stream, char * __buf,
                                 int __type, _SIZE_T __size);
int        sprintf(char * __buffer, const char * __format, ...);
//int        swprintf(wchar_t * __buffer, const wchar_t * __format, ...);
int        snprintf(char * __buffer, _SIZE_T __nsize,
                                 const char * __format, ...);
//int        snwprintf(wchar_t * __buffer, _SIZE_T __nsize,
//                                 const wchar_t * __format, ...);
int        sscanf(const char * __buffer,
                                 const char * __format, ...);
//int        swscanf(const wchar_t * __buffer,
//                                const wchar_t * __format, ...);
char  *    strerror(int __errnum);
FILE  *    tmpfile(void);
char  *    tmpnam(char * __s);
//wchar_t *  _wtmpnam(wchar_t * __s);
int        ungetc(int __c, FILE * __stream);
//_WINT_T    ungetwc(_WINT_T __c, FILE * __stream);
int        vfprintf(FILE * __stream, const char * __format,
                                 void * __arglist);
int        vfscanf(FILE * __stream, const char * __format,
                                 void * __arglist);
int        vprintf(const char * __format, void * __arglist);
int        vscanf(const char * __format, void * __arglist);
int        vsprintf(char * __buffer, const char * __format,
                                 void * __arglist);
int        vsnprintf(char * __buffer, _SIZE_T __nsize, const char * __format,
                                 void * __arglist);
int        vsscanf(const char * __buffer, const char * __format,
                                 void * __arglist);
//int        vfwprintf(FILE * __stream, const wchar_t * __format,
//                                 void * __arglist);
//int        vfwscanf(FILE * __stream, const wchar_t * __format,
//                                 void * __arglist);
//int        vwprintf(const wchar_t * __format, void * __arglist);
//int        vwscanf(const wchar_t * __format, void * __arglist);
//int        vswprintf(wchar_t * __buffer, const wchar_t * __format,
//                                 void * __arglist);
//int        vsnwprintf(wchar_t * __buffer, _SIZE_T __nsize, const wchar_t * __format,
//                                 void * __arglist);
//int        vswscanf(const wchar_t * __buffer, const wchar_t * __format,
//                                 void * __arglist);
int        _unlink(const char * __path);
//int        _wunlink(const wchar_t * __path);

int        getc(FILE * __fp);
//_WINT_T    getwc(FILE * __fp);
int        getchar(void);
//_WINT_T    getwchar(void);
int        putchar(const int __c);
//_WINT_T    putwchar(const _WINT_T __c);
int        putc(const int __c, FILE * __fp);
//_WINT_T    putwc(const _WINT_T __c, FILE * __fp);
int        feof(FILE * __fp);
int        ferror(FILE * __fp);
//int        _fileno(FILE _FAR *__fp);
int        _flushall(void);
int        _fcloseall(void);
FILE  *    _fdopen(int __handle, char * __type);
//FILE  *    _wfdopen(int __handle, wchar_t * __type);
int        _fgetchar(void);
//_WINT_T    _fgetwchar(void);
int        _fputchar(int __c);
//_WINT_T    _fputwchar(_WINT_T __c);
FILE  *    _fsopen (const char * __path, const char * __mode, int __shflag);
//FILE  *    _wfsopen (const wchar_t * __path,
//                                 const wchar_t * __mode, int __shflag);
#ifdef __IN_SOPEN
int        _sopen ();
#else
int        _sopen (const char *__path, int __access, int __shflag,
                                 ... /* unsigned mode */);
#endif
//int        _wsopen (const wchar_t *__path, int __access, int __shflag,
//                                 ... /* unsigned mode */);
int        _getw(FILE * __stream);
int        _putw(int __w, FILE * __stream);
int        _rmtmp(void);
char  *    _strerror(const char * __s);
char  *    _tempnam(char * __dir, char * __pfx);
//wchar_t *  _wtempnam(wchar_t * __dir, wchar_t * __pfx);
int        _fgetc(FILE * __stream);           /* used by getc() macro */
//_WINT_T    _fgetwc(FILE * __stream);
int        _fputc(char __c, FILE * __stream); /* used by putc() macro */
//_WINT_T    _fputwc(wchar_t __c, FILE * __stream);
#if !defined(__STDC__)
int        flushall(void);
FILE  *    fdopen(int __handle, char * __type);
int        fputchar(int __c);
int        fgetchar(void);
int        fileno(FILE * __fp);
int        fcloseall(void);
char  *    tempnam(char * __dir, char * __pfx);
int        rmtmp(void);
int        unlink(const char * __path);
int        getw(FILE * __stream);
int        putw(int __w, FILE * __stream);
int        sopen (const char *__path, int __access, int __shflag,
                                 ... /* unsigned mode */);
#endif
/*  The following macros provide for common functions */

#define ferror(__f)   ((__f)->flags & _F_ERR)
#define feof(__f)     ((__f)->flags & _F_EOF)
#define fileno(__f)   ((__f)->fd)
#define _fileno(__f)   ((__f)->fd)

#define getc(__f) \
  ((--((__f)->level) >= 0) ? (unsigned char)(*(__f)->curp++) : \
    _fgetc (__f))

#define putc(__c,__f) \
  ((++((__f)->level) < 0) ? (unsigned char)(*(__f)->curp++=(__c)) : \
    _fputc (((char)(__c)),__f))

//#define getchar()   getc(stdin)
//#define getwchar()  getwc(stdin)
//#define putchar(__c)  putc((__c), stdout)
//#define putwchar(__c) putwc((__c), stdout)

#define ungetc(__c,__f) ungetc((__c),__f)   /* traditionally a macro */

#endif 

